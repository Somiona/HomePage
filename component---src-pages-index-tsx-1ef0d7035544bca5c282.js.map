{"version":3,"sources":["webpack:///./src/pages/index.tsx"],"names":["Index","listItems","location","title","allSitePage","edges","map","node","path","sort","includes","to"],"mappings":"wiBA2BeA,UArB2B,SAAC,GAAiB,IAsClDC,EAtCmCC,EAAe,EAAfA,SACzC,OACI,oCACI,kBAAC,IAAD,CAAKA,SAAUA,IACf,kBAAC,IAAD,CAAYA,SAAUA,EAAUC,MAAO,aAInC,oDACwB,6BACpB,6BACA,oDA2BVF,EAd4B,OAcXG,YAAYC,MAC9BC,KACG,SAACC,GACG,OAAOA,EAAKA,KAAKC,QAGxBC,OAAOH,KACJ,SAACE,GACG,MAAoB,iBAATA,GAAqBA,EAAKE,SAAS,cAEtC,4BACI,kBAAC,OAAD,CAAMC,GAAIH,GACLA,IAKN,QAMnB,4BAAKP","file":"component---src-pages-index-tsx-1ef0d7035544bca5c282.js","sourcesContent":["import { graphql, Link, useStaticQuery } from \"gatsby\"\nimport React, { FC, ReactNode } from \"react\"\nimport { AvaliableLinksQuery } from \"../@types/graphql-types\"\nimport MainLayout from \"../components/Layouts/MainLayout\"\nimport SEO from \"../components/SEO\"\n\nconst Index: FC<{ location: Location }> = ({ location }) => {\n    return (\n        <>\n            <SEO location={location}/>\n            <MainLayout location={location} title={\"Main Page\"}>\n                {/*here, location is indeed a Location Object of html dom\n                    see: https://www.w3schools.com/jsref/obj_location.asp\n                */}\n                <div>\n                    Hi, this is Somiona <br/>\n                    <hr/>\n                    <div>\n                        all Possible Links:\n                        {renderLinks()}\n                    </div>\n                </div>\n            </MainLayout>\n        </>\n    )\n}\n\nexport default Index\n\nfunction renderLinks(): ReactNode {\n    const data: AvaliableLinksQuery = useStaticQuery(\n        graphql`\n            query AvaliableLinks {\n                allSitePage {\n                    edges{\n                        node{\n                            path\n                        }\n                    }\n                }\n            }\n        `,\n    )\n\n    const listItems = data.allSitePage.edges\n        .map(\n            (node) => {\n                return node.node.path\n            },\n        )\n        .sort().map(\n            (path) => {\n                if (typeof path === \"string\" && path.includes(\"/articles/\")) {\n                    return (\n                        <li>\n                            <Link to={path}>\n                                {path}\n                            </Link>\n                        </li>\n                    )\n                } else {\n                    return null\n                }\n            },\n        )\n\n    return (\n        <ul>{listItems}</ul>\n    )\n}\n\n\n"],"sourceRoot":""}